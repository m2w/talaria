{"name":"Talaria","tagline":"A commenting system for static content, hosted on github","body":"_talaria_ is a commenting system for static content, such as github pages. It is based on github commit comments. You can see _talaria_ in action [here](http://blog.tibidat.com).\r\n\r\n### Getting started\r\n\r\nUsing talaria is straightforward. The following is an example of setting up _talaria_ with a [jekyll](https://github.com/mojombo/jekyll) based site. Unfortunately, github pages does not allow for symlinks. \r\n\r\n1. clone _talaria_: `git clone https://github.com/m2w/talaria.git`\r\n\r\n2. copy all relevant files into your site's directory. \r\n    ```bash\r\n    echo $SITE_DIR # /path/to/your/site\r\n    echo $TALARIA_DIR # /path/to/talaria\r\n    cp -i $TALARIA_DIR/_includes/* $SITE_DIR/_includes/\r\n    cp -i $TALARIA_DIR/static/js/talaria.js $SITE_DIR/<js_dir>\r\n    ```\r\n    _talaria_ uses [compass](http://compass-style.org/) to generate its CSS. You have the choice:\r\n    1. `cp -i $TALARIA_DIR/_sass/talaria.scss $SITE_DIR/<sass_dir>/_talaria.scss` and `@import \"talaria\";` in your main SASS file\r\n    2. `cp -i $TALARIA_DIR/static/css/talaria.css $SITE_DIR/<css_dir>`\r\n\r\n3. To be able to query the github API via AJAX, you need to [register a github OAuth application](https://github.com/settings/applications/new) for your domain - see [here](http://developer.github.com/v3/#cross-origin-resource-sharing)\r\n\r\n4. Include `comments-placeholder.html` in your content container and `comments-template.html` in the footer of your base template. \r\n\r\n5. Add links to `talaria.js` (and `talaria.css` if you are not using SASS/compass) as required in your templates. A fully rendered page should look structurally similar to the following:\r\n    ```html\r\n    ...\r\n        <script type=\"text/javascript\" src=\"/path/to/talaria.js\"></script>\r\n        <link href=\"/static/css/talaria.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n    ...\r\n        <article>\r\n            <header><a class=\"permalink\" href=\"/permalink-to-post\">A post</a></header>\r\n            ...\r\n            {% include comments-placeholder.html %}\r\n        </article>\r\n    ...\r\n        <footer>\r\n            {% include comments-template.html %}\r\n        </footer>\r\n    ...\r\n    ```\r\n\r\n5. Customize `_talaria.scss` or `talaria.css` as required\r\n\r\n### How does _talaria_ work?\r\n\r\nA very quick run-down is as follows: _talaria_ locates all `a.permalinks` and assumes they are contained inside a parent `article` element. From there _talaria_ uses the default jekyll permalink structure for posts (/:year/:month/:day/:title/) to extrapolate the name of the file that provides the content for the \"article\". It then queries the github API to find all commits that mention said file and then retrieves all comments on these commits. The comments are then rendered using the `comments-template.html` snippet and place/arranged using `comments-placeholder.html`.\r\n\r\n### What does _talaria_ mean?\r\n\r\nThe name _talaria_ comes from the [winged sandals](http://en.wikipedia.org/wiki/Talaria) worn by Hermes in Greek mythology.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}