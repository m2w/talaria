{"name":"Talaria","tagline":"A commenting system for static content, hosted on github","body":"_talaria_ is a commenting system for static sites, like\r\n[github pages](http://pages.github.com/). It provides the option to\r\nprovide comments on github hosted content either through github commit\r\ncomments or through gist comments. You can see talaria in action\r\n[here](http://blog.tibidat.com).\r\n\r\n\r\n# ToC\r\n\r\n* [Installation](#installation)\r\n* [Introduction](#introduction)\r\n* [Getting started](#getting-started)\r\n* [Customizing and setting up talaria](#customizing-and-setting-up-talaria)\r\n  * [Customizing the Look'n'Feel](#optional-customizing-the-looknfeel)\r\n* [Best Practices](#best-practices)\r\n* [Regarding API rate-limiting](#fyi)\r\n* [Trivia](#trivia)\r\n\r\n\r\n## Installation\r\n\r\nTo install _talaria_ you have the choice between\r\n[bower](http://bower.io/):\r\n\r\n```bower install m2w/talaria```\r\n\r\nand a plain\r\n[download](https://github.com/m2w/talaria/releases/tag/0.3.1).\r\n\r\n_talaria_ depends on [jQuery](http://jquery.com/) and\r\n[async.js](https://github.com/caolan/async).\r\n\r\nNote: _talaria_ is currently not listed on the bower index.\r\n\r\n## Introduction\r\n\r\n_talaria_ makes some assumptions about how your DOM is structured. It\r\nassumes that:\r\n\r\n- every commentable content source (for example a blog post) is\r\n  wrapped in an `<article>`\r\n- these `<article>` contain one distinct element (a permalink) that\r\n  points to an URL that can be used to extrapolate the actual file\r\n  name of the content.\r\n\r\nWhat does that mean? Here is an example layout that would satisfy\r\n_talaria_'s needs.\r\n\r\n```html\r\n<body>\r\n...\r\n<article>\r\n<a class=\"permalink\" href=\"/2014/02/06/a-blog-post\">A blog post!</a>\r\n<p>My awesome unstyled one line blog post :D</p>\r\n</article>\r\n...\r\n</body>\r\n```\r\n\r\n## Getting started\r\n\r\n_talaria_ is composed of two components:\r\n\r\n- `talaria.js` which contains the logic to interact with the\r\n  [github API](http://developer.github.com/v3/)\r\n- `talaria.css` (or `talaria.sass` for [SASS](http://sass-lang.com/)\r\n  users) which provide a basic github-esque styling for the comments\r\n\r\nAssuming you have installed _talaria_ with bower and are using jekyll,\r\nwe need to customize _talaria_ so that it knows where to find your\r\ncontent sources (such as your blog posts).\r\n\r\n## Customizing and setting up talaria\r\n\r\nThis step requires that you modify your site's (base) template.\r\n\r\n1. Add `<link href=\"/bower_components/talaria/dist/talaria.css\"\r\n   rel=\"stylesheet\" type=\"text/css\">` (or add an `@import` statement\r\n   for the SASS in your main sass file)\r\n2. Add `<script type=\"text/javascript\"\r\n   src=\"/bower_components/talaria/dist/talaria.js\"></script>` (after\r\n   jQuery and async.js!)\r\n3. *After* including `talaria.js` call `talaria.init(CONFIG)` at some\r\n   point, where `CONFIG` is an object that *must* contain appropriate\r\n   values for `REPOSITORY_NAME` and `GITHUB_USERNAME`. For example:\r\n\r\n```js\r\ntalaria.init({REPOSITORY_NAME: 'm2w.github.com', GITHUB_USERNAME: 'm2w'});\r\n```\r\n\r\nShould you prefer to use gist comments instead of commit comments\r\n(recommended, but requires changes to your build process) the\r\nfollowing options are also required: `USE_GISTS` and `GIST_MAPPINGS`.\r\n\r\n`USE_GISTS` is a simple boolean flag. `GIST_MAPPINGS` is a URL which\r\nreturns a JSON file that contains an object as follows:\r\n\r\n``\r\n{:FILENAME: {\"id\": :GIST_ID, \"permalink\": :permalink},\r\n:FILENAME2: {\"id\": :GIST_ID, \"permalink\": :permalink}}\r\n``\r\n\r\nThe expected format of the mapping is currently still\r\nexperimental. Nonetheless, it requires that you generate the mappings\r\nas part of your build process, have a look at\r\n[my Rakefile](https://github.com/m2w/m2w.github.com/blob/master/Rakefile#L152)\r\nfor inspiration.\r\n\r\nIf required you have a couple of further customization options,\r\ninclude these as required in your `CONFIG` object:\r\n\r\n- `COMMENTABLE_CONTENT_PATH_PREFIX` (default `_posts/`) relative\r\n  prefix to your content source files\r\n- `CONTENT_SUFFIX` (default `.md`) this is used by _talaria_ during\r\n  the extrapolation of the path to individual content sources\r\n- `PERMALINK_IDENTIFIER` (default `a.permalink`) this should be a\r\n  valid jQuery selector that will be unique for each content source\r\n- `PAGINATION_SCHEME` (default `/\\/page\\d+\\//`) _talaria_ uses this to\r\n  check whether it should expand comments by default or not\r\n- `PERMALINK_STYLE` (default\r\n  `/[\\.\\w\\-_:\\/]+\\/(\\d+)\\/(\\d+)\\/(\\d+)\\/([\\w\\-\\.]+)$/`, which matches\r\n  something along the lines of `/:categories/:year/:month/:day/:slug`,\r\n  note the missing extension at the end) which controls how talaria\r\n  resolves filenames from permalinks, you can choose between `pretty`,\r\n  `date`, `none` or a custom regex. These correspond to the jekyll\r\n  defaults, if you choose to provide your own regex and you are using\r\n  commit-based comments please have a look at\r\n  `extrapolatePathFromPermalink` to ensure that it will work as you\r\n  expect it to.\r\n\r\nYou're now done, test the setup to ensure everything is working fine\r\nand report any bugs :)\r\n\r\n### (optional) Customizing the look'n'feel\r\n\r\nBy default _talaria_ comments are skinned to almost mirror their\r\ncounterparts on github. However, not all parts of _talaria_ are\r\nstyled. Styling for elements such as `<a>` and `<code>` is (currently)\r\nnot provided. Checkout `talaria.css` or `talaria.sass` and feel free\r\nto customize this to suit your tastes.\r\n\r\n## Best practices\r\n\r\n- Avoid multi-file changesets that contain commentable\r\n  content. e.g. if you update 3 blog posts at once (say you change the\r\n  spelling for a tag), commit each change file seperately. This ensures\r\n  there is no comment overlap between posts. It also guarantees that the\r\n  user will only see the post he planned to comment on while on github.\r\n- Avoid commiting non-commentable content along with commentable\r\n  content. e.g. if you regenerate your tag subpages after creating a\r\n  new blog post.\r\n\r\n*TLDR*: commits for commentable content should never include anything beside the content itself.\r\n\r\n## FYI\r\n\r\nThe github API is currently restricted to *60 API calls per hour* for\r\nunauthenticated users. This means that your users can retrieve\r\ncomments for at most 30 entries. This number is lower if you have\r\nmultiple commits per 'content source file'; it costs 1 additional API\r\nrequest per additional commit (so if you have 3 commits for a the post\r\n`/2013/03/22/blog-relaunch`, _talaria_ actually needs a total of 4 API\r\ncalls to get all comments). _talaria_ tries to use `sessionStorage` to\r\nreduce the total number of API calls, but users could potentially\r\nstill run into `403` errors from throtteling, in which case _talaria_\r\ndisplays a simple error message.\r\n\r\nUsers clicking the \"Add comment\" buttons get redirected to github,\r\nwhere they can then login and comment. However, at this point I do not\r\nknow of a way to get users back to your site after the redirect.\r\n\r\n_talaria_ appends the comments (that is they become the last child\r\nelement) of your `<article>`s. This is currently not customizable.\r\n\r\n## Trivia\r\n\r\ntalaria are the [winged sandals](http://en.wikipedia.org/wiki/Talaria)\r\nworn by Hermes in Greek mythology.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}